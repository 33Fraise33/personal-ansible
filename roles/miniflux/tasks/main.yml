---
- name: Get postgres container ip
  community.docker.docker_container_info:
    name: postgres
  register: result_containerip

- name: Create a new database with name "miniflux"
  community.general.postgresql_db:
    name: miniflux
    login_host: "{{ result_containerip.container.NetworkSettings.Networks.services.IPAddress }}"
    login_password: "{{ postgres_password }}"
    login_user: "{{ postgres_user }}"
    encoding: UTF-8
    lc_collate: C
    lc_ctype: C
    template: template0
  delegate_to: localhost
  become: false

- name: Setup miniflux docker container
  community.docker.docker_container:
    name: miniflux
    image: ghcr.io/miniflux/miniflux:latest
    networks:
      - name: services
    dns_servers:
      - "{{ dns_servers.adguard.dco.ipv6 }}"
      - "{{ dns_servers.adguard.dco.ip }}"
      - "{{ dns_servers.adguard.home.ipv6 }}"
      - "{{ dns_servers.adguard.home.ip }}"
    env:
      DATABASE_URL: 'postgres://{{ postgres_user }}:{{ postgres_password | regex_replace("#", "%23") }}@postgres/miniflux?sslmode=disable'
      RUN_MIGRATIONS: "1"
      CREATE_ADMIN: "1"
      ADMIN_USERNAME: "{{ miniflux.user }}"
      ADMIN_PASSWORD: "{{ miniflux.password }}"
      FETCH_YOUTUBE_WATCH_TIME: "1"
      BASE_URL: "https://rss.frai.se"
      POLLING_PARSING_ERROR_LIMIT: "0"
      WEBAUTHN: "on"
    state: started
    restart: true
    restart_policy: always
    pull: true
    labels:
      traefik.http.routers.miniflux.tls: "true"
      traefik.http.routers.miniflux.rule: "Host(`rss.frai.se`)"
      traefik.http.routers.miniflux.tls.certresolver: "le"
      traefik.http.services.miniflux.loadbalancer.server.port: "8080"
