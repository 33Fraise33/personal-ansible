---
- name: Get mongo container ip
  community.docker.docker_container_info:
    name: mongo
  register: result_containerip

- name: Create unifi databases
  community.mongodb.mongodb_user:
    login_host: "{{ result_containerip.container.NetworkSettings.Networks.networking.IPAddress }}"
    login_user: root
    login_password: "{{ mongo_root_password }}"
    database: admin
    user: unifiuser
    password: "{{ unifi_mongo_password }}"
    state: present
    roles:
      - db: unifi
        role: dbOwner
      - db: unifi_stat
        role: dbOwner
  delegate_to: localhost
  become: false

- name: Create a volume for unifi config
  community.docker.docker_volume:
    name: config_unifi

- name: Setup unifi docker container
  community.docker.docker_container:
    name: unifi
    image: lscr.io/linuxserver/unifi-network-application:latest
    networks:
      - name: networking
        ipv4_address: "{{ docker.networks.networking.ipam[0].subnet \
          | ansible.utils.ipsubnet(24, 0) \
          | ansible.utils.ipaddr(docker.networks.networking.hosts.unifi) \
          | ansible.utils.ipaddr('address') }}"
        ipv6_address: "{{ docker.networks.networking.ipam[1].subnet | ansible.utils.ipaddr('network') }}\
          {{ docker.networks.networking.hosts.unifi }}"
    volumes:
      - "config_unifi:/config"
    env:
      TZ: Etc/UTC
      MONGO_USER: unifiuser
      MONGO_PASS: "{{ unifi_mongo_password }}"
      MONGO_HOST: mongo
      MONGO_PORT: "27017"
      MONGO_DBNAME: unifi
      MONGO_AUTHSOURCE: admin
    restart: true
    restart_policy: always
    state: started
    pull: true
    labels:
      traefik.http.routers.unifi.rule: "Host(`unifi.unitix.be`)"
      traefik.http.routers.unifi.tls: "true"
      traefik.http.routers.unifi.tls.certresolver: "le"
      traefik.http.services.unifi.loadbalancer.server.port: "8443"
      traefik.http.services.unifi.loadbalancer.server.scheme: "https"
